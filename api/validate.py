#!/usr/bin/env python3
"""
Python –≤–µ—Ä—Å–∏—è API –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ó–∞–ø—É—Å–∫: python3 api/validate.py
"""

import json
import os
import re
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import base64

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_env():
    env_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'env.local')
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value

load_env()

# –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
RULES = {
    "insurance": {
        "displayName": "Ubezpieczenie medyczne",
        "requiredFields": [
            "insurer_name",
            "policy_number", 
            "insured_name",
            "id_number",
            "valid_from",
            "valid_to",
            "coverage_summary",
            "signatures_present"
        ],
        "patterns": {
            "policy_number": r"^[A-Za-z0-9\-/]{4,}$",
            "id_number": r"^[A-Za-z0-9]{5,}$",
            "valid_from": r"^\d{4}-\d{2}-\d{2}$",
            "valid_to": r"^\d{4}-\d{2}-\d{2}$"
        },
        "redFlagHints": [
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫ –∏–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞",
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞",
            "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç–µ–ª—è/—Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫–∞",
            "–ù–µ—Ç –§–ò–û –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–Ω–∫–µ—Ç–æ—é",
            "–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–æ—Ç–ª–æ–∂–∫–∞/—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä)"
        ]
    }
}

def build_extraction_schema(doc_type):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    if doc_type == "insurance":
        return {
            "type": "object",
            "additionalProperties": False,
            "properties": {
                "insurer_name": {"type": "string"},
                "policy_number": {"type": "string"},
                "insured_name": {"type": "string"},
                "id_number": {"type": "string"},
                "valid_from": {"type": "string"},
                "valid_to": {"type": "string"},
                "coverage_summary": {"type": "string"},
                "signatures_present": {"type": "boolean"},
                "stamp_present": {"type": "boolean"}
            },
            "required": []
        }
    return {"type": "object", "additionalProperties": True, "properties": {}}

def validate_extracted(extracted, cfg):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    issues = []
    hints = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    for field in cfg.get("requiredFields", []):
        if field not in extracted or (isinstance(extracted[field], str) and not extracted[field].strip()):
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for field, pattern in cfg.get("patterns", {}).items():
        value = str(extracted.get(field, ""))
        if value and not re.match(pattern, value):
            issues.append(f"–ü–æ–ª–µ {field} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É ({pattern})")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
    if cfg.get("displayName") == "Ubezpieczenie medyczne":
        try:
            valid_from = datetime.strptime(extracted.get("valid_from", ""), "%Y-%m-%d")
            valid_to = datetime.strptime(extracted.get("valid_to", ""), "%Y-%m-%d")
            
            if valid_to < valid_from:
                issues.append("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ª–∏—Å–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
            
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            if valid_to < today:
                issues.append("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª–∏—Å–∞ –∏—Å—Ç—ë–∫")
                
        except ValueError:
            pass

        coverage = extracted.get("coverage_summary", "")
        if not coverage or len(coverage) < 5:
            hints.append("–ü–æ–∫—Ä—ã—Ç–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –ø–æ–ª–∏—Å–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã")

    hints.extend(cfg.get("redFlagHints", []))
    return issues, hints

def mock_openai_analysis(file_data, doc_type):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ OpenAI (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ OpenAI API
    print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {doc_type} –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if doc_type == "insurance":
        return {
            "insurer_name": "PZU S.A.",
            "policy_number": "POL-2024-001",
            "insured_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            "id_number": "ABC12345",
            "valid_from": "2024-01-01",
            "valid_to": "2024-12-31",
            "coverage_summary": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –≤–∫–ª—é—á–∞—è –Ω–µ–æ—Ç–ª–æ–∂–Ω—É—é –ø–æ–º–æ—â—å –∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ",
            "signatures_present": True,
            "stamp_present": True
        }
    
    return {}

class ValidationHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/api/validate':
            self.handle_validation()
        else:
            self.send_error(404, "Not Found")

    def handle_validation(self):
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            body = self.rfile.read(content_length)
            data = json.loads(body.decode('utf-8'))

            doc_type = data.get('docType')
            file_data = data.get('file')

            if not doc_type or not file_data:
                self.send_error(400, "docType and file are required")
                return

            if doc_type not in RULES:
                self.send_error(400, f"Unknown docType: {doc_type}")
                return

            cfg = RULES[doc_type]

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ OpenAI
            extracted = mock_openai_analysis(file_data, doc_type)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            issues, hints = validate_extracted(extracted, cfg)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = {
                "ok": len(issues) == 0,
                "issues": issues,
                "hints": hints,
                "extracted": extracted
            }

            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            self.end_headers()
            
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

        except Exception as e:
            print(f"Error: {e}")
            self.send_error(500, f"Server error: {str(e)}")

    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def log_message(self, format, *args):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {format % args}")

def run_server(port=8001):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
    server_address = ('', port)
    httpd = HTTPServer(server_address, ValidationHandler)
    print(f"üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{port}")
    print(f"üìù Endpoint: POST http://localhost:{port}/api/validate")
    print(f"üîë OpenAI API –∫–ª—é—á: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if os.getenv('OPENAI_API_KEY') else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        httpd.server_close()

if __name__ == "__main__":
    run_server()
